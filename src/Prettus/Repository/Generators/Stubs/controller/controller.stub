<?php

$NAMESPACE$

use Illuminate\Http\Request;
use $APPNAME$Http\Requests;
use $APPNAME$Http\Controllers\Controller;
use Prettus\Validator\Contracts\ValidatorInterface;
use Prettus\Validator\Exceptions\ValidatorException;
$MODEL$
$REPOSITORY$
$VALIDATOR$

/**
 * Class $CONTROLLER$Controller.
 *
 * @package $NAMESPACE$
 */
class $CONTROLLER$Controller extends Controller
{
    /**
     * @var $CLASS$Repository
     */
    protected $repository;

    /**
     * @var $CLASS$Validator
     */
    protected $validator;

    /**
     * $CONTROLLER$Controller constructor.
     *
     * @param $CLASS$Repository $repository
     * @param $CLASS$Validator $validator
     */
    public function __construct($CLASS$Repository $repository, $CLASS$Validator $validator)
    {
        $this->repository = $repository;
        $this->validator  = $validator;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // Enable below line to enable request criteria
        // $this->repository->pushCriteria(app('Prettus\Repository\Criteria\RequestCriteria'));
        $$PLURAL$ = $this->repository->all();

        return view('$PLURAL$.index', compact('$PLURAL$'));
    }

    /**
     * Show the form for creating the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $$SINGULAR$ = $this->repository->makeModel();

        return view('$PLURAL$.create', compact('$SINGULAR$'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  $CLASS$CreateRequest $request
     *
     * @return \Illuminate\Http\Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function store(Request $request)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_CREATE);

            $$SINGULAR$ = $this->repository->create($request->all());

            $response = [
                'message' => '$CLASS$ created.',
                'data'    => $$SINGULAR$->toArray(),
            ];
        } catch (ValidatorException $e) {
            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        }

        return redirect()->back()->with('message', $response['message']);
    }

    /**
     * Display the specified resource.
     *
     * @param  $CLASS$ $$SINGULAR$
     *
     * @return \Illuminate\Http\Response
     */
    public function show($CLASS$ $$SINGULAR$)
    {
        return view('$PLURAL$.show', compact('$SINGULAR$'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  $CLASS$ $$SINGULAR$
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($CLASS$ $$SINGULAR$)
    {
        return view('$PLURAL$.edit', compact('$SINGULAR$'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  $CLASS$UpdateRequest $request
     * @param  $CLASS$ $$SINGULAR$
     *
     * @return Response
     *
     * @throws \Prettus\Validator\Exceptions\ValidatorException
     */
    public function update(Request $request, $CLASS$ $$SINGULAR$)
    {
        try {
            $this->validator->with($request->all())->passesOrFail(ValidatorInterface::RULE_UPDATE);

            $$SINGULAR$ = $this->repository->update($request->all(), $$SINGULAR$);

            $response = [
                'message' => '$CLASS$ updated.',
                'data'    => $$SINGULAR$->toArray(),
            ];
        } catch (ValidatorException $e) {
            return redirect()->back()->withErrors($e->getMessageBag())->withInput();
        }

        return redirect()->back()->with('message', $response['message']);
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($CLASS$ $$SINGULAR$)
    {
        $deleted = $this->repository->delete($$SINGULAR$);

        return redirect()->back()->with('message', '$CLASS$ deleted.');
    }
}
